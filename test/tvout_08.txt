// the first 2 bytes of every row are off screen, design choice to implement screen shake
// PAL_OUTPUT_START can be used fos x axis shake
// 51 bytes every row

#include "RAM.h"
#include "TvLib.h"
#include "spec//asm_macros.h"


#define beginTestClock TCCR0B |=  0b00000001;
#define endTestClock TCCR0B &= 0b11111000;

uint16_t pos = 0;
  
void test()
{
   // select slave by pulling SS low
  PORT_RAM &= ~_BV(7);
  
  SPDR = READ;
  asm volatile("nop");
  while (!(SPSR & _BV(SPIF)));
  // give the addr MSB first
  SPDR = (uint8_t)(pos >> 8);
  asm volatile("nop");
  while (!(SPSR & _BV(SPIF)));
   SPDR = (uint8_t)(pos);
  asm volatile("nop");
  while (!(SPSR & _BV(SPIF)));
  
  wait_until(PAL_OUTPUT_START);
  
  // 50 byte stream
  DDRD |= _BV(6);
  beginTestClock
  __asm__ __volatile__ ("delayRenderTime\n"); 
 
  //endTestClock
  DDRD &= ~_BV(6);
      
  // signal end transmittion by pulling ss low
  PORT_RAM |= _BV(7);

  if(pos == 51)
    pos = 0;
  else
    pos = 51;
}

void setup() 
{
  // reset register
  // DO NOT TOUCH THIS STUPID MORON!
  // THIS ISN'T FOR LINE TESTING BITCH!
  TCCR0A = 0b01000011;
  TCCR0B = 0b00001000;
  OCR0A = 0;
  
  
  RAM.add(7, SEQ_MODE);
  RAM.write(7, 0b11111111, 0);
  RAM.write(7, 0b11111111, 1);
  RAM.write(7, 0b00000000, 2);
  RAM.write(7, 0b00000000, 3);
  RAM.write(7, 0b00000000, 4);
  RAM.write(7, 0b11111111, 43);
  RAM.write(7, 0b00000000, 49);

  RAM.write(7, 0b11111111, 51);
  RAM.write(7, 0b00000000, 52);
  RAM.write(7, 0b11111111, 53);
  RAM.write(7, 0b00000000, 54);
  RAM.write(7, 0b00000000, 55);

  //RAM.write(7, 0xff, 258);
  
  TV.setRender(test);
  TV.start();
  
}

void loop() 
{

}